package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;

//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.Break;


//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;
import expresiones.OperadoresLogicos;
import expresiones.Logicas;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, ENTERO, DECIMAL, ID;
terminal FINCADENA, PRINTLN, INT, DOUBLE, STRING;
terminal PAR1, PAR2, MAS, MENOS,UMENOS;
terminal MULT, DIV, MOD, POTENCIA;
terminal IGUAL, EQUALS, NOEQUALS, MAYOR, MAYOREQ, MENOREQ;
terminal TRUE, FALSE, IF, BOOL, MATCH;
terminal LLAVE1, LLAVE2;
terminal FOR, MENOR, DIF, WHILE, DOWHILE;
terminal CASA, AMP, BARRA,OR,AND,XOR,NOT
terminal VAR, CONST;
terminal String BREAK;



//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
nonterminal Instruccion SIF;
nonterminal Instruccion SMATCH;
nonterminal Instruccion CFOR, ACTUALIZA_FOR;
nonterminal Instruccion CWHILE;
nonterminal Instruccion CDOWHILE;
nonterminal Instruccion BREAKK;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left EQUALS,NOEQUALS,MAYOR,MENOR,MAYOREQ,MENOREQ, DIF;
precedence left MAS,MENOS;
precedence left MULT,DIV,MOD;
precedence POTENCIA;
precedence left UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION: a        {:   RESULT=a;   :}
              | DECLARACION:a       {:   RESULT=a;   :}
              | ASIGNACION:a        {:   RESULT=a;   :}
              | SIF:a               {:   RESULT=a;   :}
              | SMATCH:a            {:   RESULT=a;   :}
              | CFOR:a              {:   RESULT=a;   :}
              | CWHILE:a            {:   RESULT=a;   :}
              | CDOWHILE:a          {:   RESULT=a;   :}
              | BREAKK:a            {:   RESULT=a;   :}
              | error FINCADENA
              
;

IMPRESION ::= PRINTLN PAR1 EXPRESION:a PAR2 FINCADENA      {:   RESULT = new Print(a, aleft, aright);   :}
;

DECLARACION ::= TIPOS:a ID:b IGUAL EXPRESION:c FINCADENA      {: RESULT = new Declaracion(b, c, a, aleft, aright);           :}
                | VAR ID:b ":" TYPE:c EQUALS EXPRESION:d FINCADENA    {: RESULT = new Declaracion(b, d, new Tipo(c), aleft, aright); :}
                | CONST ID:b ":" TYPE:c EQUALS EXPRESION:d FINCADENA  {: RESULT = new Declaracion(b, d, new Tipo(c), aleft, aright); :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2  {:   RESULT = new If(a, b, aleft, aright);   :}
;
CMATCH ::= MATCH PAR1 EXPRESION:a PAR2 LLAVE1 CASOS:b LLAVE2
{
    RESULT = new Match(a, b, aleft, aright);
}
;

CASOS ::= CASO:c { $$.add(c); }
        | CASOS CASO:c { $1.add(c); RESULT = $1; }
;

CASO ::= CASE EXPRESION:a DOSPUNTOS INSTRUCCIONES:b
{
    RESULT = new Caso(a, b, aleft, aright);
}
;
CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     
{:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;
CWHILE ::= WHILE PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2
{
    RESULT = new While(a, b, aleft, aright);
}
;
CDOWHILE ::= DO LLAVE1 INSTRUCCIONES:a LLAVE2 WHILE PAR1 EXPRESION:b PAR2
{
    RESULT = new DoWhile(a, b, aleft, aright);
}
;
ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

BREAKK ::= BREAK:a FINCADENA      {:    RESULT = new Break(aleft, aright);     :}
;

TIPOS ::= INT       {:   RESULT=new Tipo(tipoDato.ENTERO);   :}
        | DOUBLE    {:   RESULT=new Tipo(tipoDato.DECIMAL);   :}
        | STRING    {:   RESULT=new Tipo(tipoDato.CADENA);   :}
        | CHAR      {:   RESULT=new Tipo(tipoDato.CARACTER);   :}
        | BOOL      {:   RESULT=new Tipo(tipoDato.BOOLEANO);   :}
;

EXPRESION ::= MENOS EXPRESION:a             {:   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   :} %prec UMENOS
            | EXPRESION:a MULT MULT EXPRESION:b  {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   :}%prec POTENCIA
            | EXPRESION:a MOD EXPRESION:b  {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   :}
            | EXPRESION:a DIV EXPRESION:b  {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   :}
            | EXPRESION:a MULT EXPRESION:b  {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   :}
            | EXPRESION:a MAS EXPRESION:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            | EXPRESION:a MENOS EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);    :}%prec EQUALS
            | EXPRESION:a DIF IGUAL EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.NOTEQUALS, aleft, aright);    :}%prec NOEQUALS
            | EXPRESION:a MENOR EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);    :}
            | EXPRESION:a MAYOR EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);    :}
            | EXPRESION:a MENOR IGUAL EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOREQ, aleft, aright);    :}%prec MENOREQ
            | EXPRESION:a MAYOR IGUAL EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOREQ, aleft, aright);    :}%prec MAYOREQ
            | EXPRESION:a BARRA BARRA EXPRESION:b  {: RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); :}%prec OR
            | EXPRESION:a AMP AMP EXPRESION:b  {: RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); :}%prec AND
            | EXPRESION:a CASA EXPRESION:b  {: RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); :}%prec XOR
            | DEF EXPRESION:a  {: RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); :}%prec NOT

            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   :}
            | CARACTER:a    {:   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   :}
            | TRUE:a        {:   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   :}
            | FALSE:a       {:   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    :}
            | ID:a          {:   RESULT = new AccesoVar(a, aleft, aright);   :}
            | VAR           {:   return new Symbol(sym.VAR); }
            | CONST         {:   return new Symbol(sym.CONST); }
            | PAR1 EXPRESION:a PAR2     {:   RESULT = a;   :}
;                        